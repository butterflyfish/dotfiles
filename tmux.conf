# Make it use C-a, similar to GNU screen..
set -g prefix C-a
unbind C-b
bind a send-prefix
# switch to last pane
bind C-a last

# improve colors
set -g default-terminal "xterm-256color"

# increase scrollback lines
set -g history-limit 1000

# mouse support
set -g mouse on

# panel {{{1
# use -,\ to split window horizontally,vertically
unbind '"'
bind - splitw -v
unbind %
bind \ splitw -h

# Smart pane switching with awareness of vim splits
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"

# To resize a split, just use this:
bind -r ^l resize-pane -R 10
bind -r ^j resize-pane -D 10
bind -r ^k resize-pane -U 10
bind -r ^h resize-pane -L 10

# exchange location of pane
bind C-u swapp -U
bind C-d swapp -D
# }}}

# Windows {{{1
# start windows numbering at 1
set -g base-index 1

# start pane numbering at 1
setw -g pane-base-index 1

# renumber windows sequentially after closing any of them
set -g renumber-windows on
# }}}

# copy mode {{{1
#
# hit prefix + [ to enter copy mode.
#
# Use vim keybindings in copy mode
# "tmux list-keys -t vi-copy" list key-binding in vi-copy mode
setw -g mode-keys vi

# Setup 'v' to begin selection as in Vim
bind-key -t vi-copy v begin-selection
if 'which -s reattach-to-user-namespace' 'bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"'

# Update default binding of `Enter` to also use copy-pipe
unbind -t vi-copy Enter
if 'which -s reattach-to-user-namespace' 'bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"'

# }}}

# support automatically jump back
bind m command-prompt "splitw -v 'exec man %%'"
bind s command-prompt "neww 'exec ssh %%'"

# provide an alternate mapping to clear-screen
bind C-c send-keys 'C-l'

# vim: set foldlevel=0 foldmethod=marker:
