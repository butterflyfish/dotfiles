call plug#begin('~/.vim/plugged')


Plug 'tpope/vim-repeat'

" toggle, display and navigate marks
Plug 'kshenoy/vim-signature'

" toggle the display of the quickfix list and the location-list
" Plug 'Valloric/ListToggle'

" Change code right in the quickfix window
Plug 'stefandtw/quickfix-reflector.vim'

" set filetype according to context
Plug 'Shougo/context_filetype.vim'

" work better for neovim {{{1
if has("nvim")

" man page:autocomplete, jump to manpages
Plug 'nhooyr/neoman.vim'

Plug 'benekastah/neomake'
nnoremap <F5> :w<CR> :Neomake!<CR>
inoremap <F5> <Esc>:w<CR>:Neomake!<CR>

" auto-complete {{{2

Plug 'Shougo/deoplete.nvim'
let g:deoplete#enable_at_startup = 1

Plug 'zchee/deoplete-clang'
let g:deoplete#sources#clang#libclang_path =  "/usr/local/opt/llvm/lib/libclang.dylib"
let  g:deoplete#sources#clang#clang_header = '/usr/local/opt/llvm/lib/clang'

Plug 'Shougo/neoinclude.vim'

Plug 'zchee/deoplete-go', { 'for': 'go', 'do': 'make'}

Plug 'Shougo/echodoc.vim'
set cmdheight=2
let g:echodoc_enable_at_startup = 1

" }}}

endif
" }}}

" Edit assistant {{{1

Plug 'tpope/vim-commentary'

Plug 'bkad/CamelCaseMotion'
omap <silent> iw <Plug>CamelCaseMotion_iw
xmap <silent> iw <Plug>CamelCaseMotion_iw

" provides mappings to easily delete, change and add such surroundings in pairs
Plug 'tpope/vim-surround'

" Easy text exchange operator
Plug 'tommcdo/vim-exchange'

" provides insert mode auto-completion for quotes, parens, brackets, etc.
Plug 'Raimondi/delimitMate'

" https://github.com/terryma/vim-multiple-cursors
" see example gif and keystrokes
Plug 'terryma/vim-multiple-cursors'
" prevent conflict with deoplete: github.com/Shougo/deoplete.nvim/issues/162
function! Multiple_cursors_before()
    let b:deoplete_disable_auto_complete = 1
endfunction

function! Multiple_cursors_after()
    let b:deoplete_disable_auto_complete = 0
endfunction
" }}}

" code {{{1

" displaying thin vertical lines at each indentation level for code indented
" with spaces. patching font to get better visual
Plug 'Yggdroot/indentLine'

" JSON manipulation and pretty printing
Plug 'tpope/vim-jdaddy', { 'for': 'json' }

" Golang {{{2
"
" :GoInstallBinaries/GoUpdateBinaries to install/update godef, gocode etc
Plug 'fatih/vim-go', { 'do': 'vim +GoInstallBinaries +qall' }

" workable for vim and mvim
let g:go_bin_path=expand("~/.gocode/bin")

" Show type info for the word under your cursor
let g:go_auto_type_info=1

" Enable goimports to automatically insert import paths instead of gofmt
let g:go_fmt_command = "goimports"

" Disable auto fmt on save:
" let g:go_fmt_autosave = 0

" }}}

" Javascript and HTML {{{2
" javascript auto-completition based on Tern
" Tern uses .tern-project files to configure loading libraries and plugins for
" a project. See the Tern docs for details
Plug 'marijnh/tern_for_vim', { 'do': 'npm install' }

" Yet Another Javascript Syntax
Plug 'othree/yajs.vim'

Plug 'mattn/emmet-vim'

" }}}

" Ultisnips {{{2

" vim-snippets depends on ultisnips
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

" work under insermode or :call UltiSnipsListSnippets()
let g:UltiSnipsListSnippets= "<c-u>"

" https://github.com/SirVer/ultisnips/issues/519#issuecomment-143450416
" next menu item, expand snippet, forward or insert literal tab
let g:UltiSnipsJumpForwardTrigger="<NOP>"
inoremap <expr> <TAB>
    \ pumvisible() ? "\<C-n>" :
    \ "<C-R>=ExpandSnippetOrJumpForwardOrReturnTab()<CR>"

" forward or do nothing
snoremap <buffer> <silent> <TAB>
    \ <ESC>:call UltiSnips#JumpForwards()<CR>

" expand snippet, close menu or insert newline
let g:UltiSnipsExpandTrigger = "<NOP>"
inoremap <silent> <CR> <C-R>=ExpandSnippetOrReturnEmptyString()<CR>

function! ExpandSnippetOrJumpForwardOrReturnTab()
    let snippet = UltiSnips#ExpandSnippetOrJump()
    if g:ulti_expand_or_jump_res > 0
        return snippet
    else
        return "\<TAB>"
    endif
endfunction

function! ExpandSnippetOrReturnEmptyString()
    if pumvisible()
        let snippet = UltiSnips#ExpandSnippetOrJump()
        if g:ulti_expand_or_jump_res > 0
            return snippet
        else
            return "\<C-y>\<CR>"
        endif
    else
        return "\<CR>"
endfunction

"}}}

" tagbar {{{2
Plug 'majutsushi/tagbar'
let g:tagbar_left=1
let g:tagbar_autofocus=1
nmap <leader>t :TagbarOpenAutoClose<CR>
" }}}

" }}}

" Tmux & Airline {{{1

" Plug 'bling/vim-airline'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1

Plug 'christoomey/vim-tmux-navigator'

" Just start vim inside of tmux. airline's colors will be applied to tmux's
" statusline
Plug 'edkolev/tmuxline.vim'

" }}}

" easy-align {{{1
Plug 'junegunn/vim-easy-align'

" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
" wildfire also use Enter by default
vmap <Enter> <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. <Leader>aip)
nmap <Leader>a <Plug>(EasyAlign)
"}}}

" Git {{{1

" Glog, Grep, Gblame
Plug 'tpope/vim-fugitive'

" shows a git diff in the gutter
Plug 'airblade/vim-gitgutter'
let g:gitgutter_map_keys = 0
" jump between hunks:
nmap ]h <Plug>GitGutterNextHunk
nmap [h <Plug>GitGutterPrevHunk

" }}}

" CtrlP {{{1
" Fast CtrlP matcher based on python
Plug 'FelikZ/ctrlp-py-matcher'
let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }

Plug 'tacahiroy/ctrlp-funky'
nnoremap <Leader>ff :CtrlPFunky<Cr>

Plug 'ctrlpvim/ctrlp.vim'
" nnoremap <Leader>o :CtrlP<CR>
let g:ctrlp_map = '<Leader>o'


"'r' - the nearest ancestor that contains one of these directories or files:
"      .git .hg .svn .bzr _darcs
"'c' - the directory of the current file
let g:ctrlp_working_path_mode = 'rc'

if executable('ag') " The Silver Searcher
    let s:ctrlp_fallback = 'ag %s --nocolor -l -g ""'
    " ag is fast enough that CtrlP doesn't need to cache
    let g:ctrlp_use_caching = 0
elseif executable('find')
    let s:ctrlp_fallback = 'find %s -type f'
else " Window OS
    let s:ctrlp_fallback = 'dir %s /-n /b /s /a-d'
endif

"Use %s in place of the target directory
let g:ctrlp_user_command = {
    \ 'types': {
      \ 1: ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others'],
      \ 2: ['.hg', 'hg --cwd %s locate -i .'],
    \ },
    \ 'fallback': s:ctrlp_fallback
    \ }

" Exclude files and directories using Vim's wildignore and g:ctrlp_custom_ignore
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ }

nmap <leader><space> :CtrlPBuffer<cr>

" }}}

" Undotree {{{1
Plug 'mbbill/undotree'
nnoremap <leader>u :UndotreeToggle<CR>
let g:undotree_SetFocusWhenToggle=1
" }}}

" color scheme and highlight {{{1

" colorscheme
Plug 'morhetz/gruvbox'
Plug 'justinmk/molokai'
Plug 'ap/vim-css-color'

" all trailing whitespace characters (spaces and tabs)
" :StripWhitespace --- clean whitespace painless
Plug 'ntpeters/vim-better-whitespace'

" showing different levels of parentheses in different colors
Plug 'luochen1990/rainbow'
let g:rainbow_active = 1

" }}}

" search {{{1

Plug 'easymotion/vim-easymotion'

" Disable default mappings
let g:EasyMotion_do_mapping = 0

" makes EasyMotion work similarly to Vim's smartcase for global searches
let g:EasyMotion_smartcase = 1

" n-character search motion
" use <Tab> and <S-Tab> to scroll down/up a page
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)

" 2-character search motion
nmap s <Plug>(easymotion-s2)
nmap t <Plug>(easymotion-t2)

" JK motions: Line motions
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)

" Move to word
map  <Leader>w <Plug>(easymotion-bd-w)
nmap <Leader>w <Plug>(easymotion-overwin-w)

Plug 'dyng/ctrlsf.vim'
map <leader>/ :CtrlSF<Space>
map <leader>c :CtrlSFToggle<cr>
" }}}

" autoload .vimrc.plug
au! bufwritepost .vimrc.plug source ~/.vimrc.plug

if filereadable(expand("~/.vimrc.plug.local"))
    source ~/.vimrc.plug.local
endif

call plug#end()

" vim: set foldlevel=0 foldmethod=marker:
