" Plug {{{1
let vimplug_exists=expand('~/.vim/autoload/plug.vim')

if !filereadable(vimplug_exists)
    if !executable("curl")
        echoerr "You have to install curl or first install vim-plug yourself!"
        execute "q!"
    endif
    echo "Installing Vim-Plug..."
    echo ""
    silent !\curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    let g:not_finish_vimplug = "yes"

    autocmd VimEnter * PlugInstall
endif

" Required:
call plug#begin(expand('~/.vim/plugged'))
" }}}

Plug 'tpope/vim-repeat'

" Sidebar {{{1

Plug 'Xuyuanp/nerdtree-git-plugin' | Plug 'scrooloose/nerdtree'
map <leader>e :NERDTreeToggle<CR>
let g:NERDTreeQuitOnOpen=1

" universal-ctags is recommended
Plug 'majutsushi/tagbar'
nmap <silent> t :TagbarOpenAutoClose<CR>

" https://github.com/jstemmer/gotags
let g:tagbar_type_go = {
            \ 'ctagstype' : 'go',
            \ 'kinds'     : [
            \ 'p:package',
            \ 'i:imports:1',
            \ 'c:constants',
            \ 'v:variables',
            \ 't:types',
            \ 'n:interfaces',
            \ 'w:fields',
            \ 'e:embedded',
            \ 'm:methods',
            \ 'r:constructor',
            \ 'f:functions'
            \ ],
            \ 'sro' : '.',
            \ 'kind2scope' : {
            \ 't' : 'ctype',
            \ 'n' : 'ntype'
            \ },
            \ 'scope2kind' : {
            \ 'ctype' : 't',
            \ 'ntype' : 'n'
            \ },
            \ 'ctagsbin'  : 'gotags',
            \ 'ctagsargs' : '-sort -silent'
            \ }
" }}} Sidebar

" Edit assistant {{{1

Plug 'bkad/CamelCaseMotion'
omap <silent> iw <Plug>CamelCaseMotion_iw
xmap <silent> iw <Plug>CamelCaseMotion_iw

" provides mappings to easily delete, change and add such surroundings in pairs
Plug 'tpope/vim-surround'

" Insert or delete brackets, parens, quotes in pair
Plug 'jiangmiao/auto-pairs'
" disable Map <CR> to insert a new indented line if cursor in (|), {|} [|], '|', "|"
" pls refer to keymap below with ncm2 and UltiSnips
let g:AutoPairsMapCR=0

Plug 'terryma/vim-multiple-cursors'

" insert mode: c-v
Plug 'cyansprite/Extract'
" the number of yanks you want to save
let g:extract_maxCount=10

Plug 'mbbill/undotree'
nnoremap <leader>u :UndotreeToggle<CR>
let g:undotree_SetFocusWhenToggle=1

Plug 'tpope/vim-commentary'

" }}}

" Completion {{{1

" ncm2 requires nvim-yarp
Plug 'ncm2/ncm2' | Plug 'roxma/nvim-yarp'
" enable ncm2 for all buffer
autocmd BufEnter * call ncm2#enable_for_buffer()
" Plug 'ncm2/float-preview.nvim'

Plug 'ncm2/ncm2-bufword'
Plug 'ncm2/ncm2-path'

Plug 'ncm2/ncm2-ultisnips' | Plug 'SirVer/ultisnips'
let g:UltiSnipsExpandTrigger = "<C-u>"   " less used because of keymap below

Plug 'honza/vim-snippets'

let g:LanguageClient_hasSnippetSupport=1
Plug 'autozimu/LanguageClient-neovim', {
            \ 'branch': 'next',
            \ 'do': 'bash install.sh',
            \ }

let g:LanguageClient_serverCommands = {
            \ 'go': ['go-langserver', '-gocodecompletion', '-diagnostics', '-lint-tool', 'golint' ],
            \ 'c': ['clangd'],
            \ }

augroup LanguageClient_keymap
    autocmd!
    autocmd User LanguageClientStarted nnoremap <silent>  <cr> :call LanguageClient#textDocument_hover()<CR>
    autocmd User LanguageClientStarted nnoremap <silent>  gd   :call LanguageClient#textDocument_definition()<CR>
    autocmd User LanguageClientStarted nnoremap <silent>  <leader>lx   :call LanguageClient#textDocument_references()<CR>
    autocmd User LanguageClientStarted nnoremap <silent>  <leader>ls   :call LanguageClient_textDocument_documentSymbol()<CR>
    autocmd User LanguageClientStarted nnoremap <silent>  <leader>lr :call LanguageClient#textDocument_rename()<CR>

    autocmd BufWritePre *.go :call LanguageClient#textDocument_formatting_sync()
augroup END

" }}} Completion

" Search & Explore {{{1

Plug 'easymotion/vim-easymotion'

" Disable default mappings
let g:EasyMotion_do_mapping = 0

" makes EasyMotion work similarly to Vim's smartcase for global searches
let g:EasyMotion_smartcase = 1

" n-character search motion
" use <Tab> and <S-Tab> to scroll down/up a page
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)

" JK motions: Line motions
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)

" Move to word
map  <Leader>w <Plug>(easymotion-bd-w)
nmap <Leader>w <Plug>(easymotion-overwin-w)

" By default, CtrlSF use working directory as search path when no path is specified
Plug 'dyng/ctrlsf.vim'
map   <leader>/ :CtrlSFToggle<cr>
nmap  <leader>f <Plug>CtrlSFCwordPath
vmap  <leader>f <Plug>CtrlSFVwordExec

" ripgrep
if executable('rg')
    let g:ctrlsf_ackprg = 'rg'

    " explictly set FZF_DEFAULT_COMMAND to avoid GUI does not know it
    let $FZF_DEFAULT_COMMAND = 'rg --files --hidden --follow --glob "!.git/*"'

    command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)
    map <leader>s :Find<space>
    " command! -bang -nargs=* GGrep
    "   \ call fzf#vim#grep('git grep --line-number '.shellescape(<q-args>), 0, <bang>0)
endif

" it use FZF_DEFAULT_COMMAND to find files
if isdirectory('/usr/local/opt/fzf') " Mac/brew
    Plug '/usr/local/opt/fzf'
else
    Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --bin' }
endif
Plug 'junegunn/fzf.vim'
nnoremap <silent>  <leader>o :FZF +m --prompt=Files><CR>
nnoremap <silent>  <leader><space> :Buffers<CR>
nnoremap <silent>  <leader>m :Marks<CR>

" }}}

" Color scheme and Highlight {{{1

" colorscheme
Plug 'morhetz/gruvbox'
Plug 'sickill/vim-monokai'
" many themes, inlucde base16-monokai, base16-gruvbox
Plug 'chriskempson/base16-vim'


" all trailing whitespace characters (spaces and tabs)
" :StripWhitespace --- clean whitespace painless
Plug 'ntpeters/vim-better-whitespace'

" showing different levels of parentheses in different colors
Plug 'luochen1990/rainbow'
let g:rainbow_active = 1

" highlight text yanked
Plug 'machakann/vim-highlightedyank'

" displaying thin vertical lines at each indentation level for code indented
" with spaces. patching font to get better visual
Plug 'Yggdroot/indentLine'
" don't hide quotes for json files
let g:indentLine_fileTypeExclude = ['json']

Plug 'ap/vim-css-color'


" }}} Color scheme

" Status Line {{{

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = "unique_tail"

" airline need it to show branch
" it also load tags under .git if it does exist
Plug 'tpope/vim-fugitive'

" }}} Status Line

" Git {{{1

" shows a git diff in the gutter
Plug 'airblade/vim-gitgutter'
let g:gitgutter_map_keys = 0
" jump between hunks:
nmap ]h <Plug>GitGutterNextHunk
nmap [h <Plug>GitGutterPrevHunk

" }}}

" Tmux {{{1

" move between Vim panes and tmux splits seamlessly
Plug 'christoomey/vim-tmux-navigator'

" vim-tmux-clipboard automatically copy yanked text into tmux's clipboard, and
" copy tmux's clipboard content into vim's quote(") register
" Plug 'roxma/vim-tmux-clipboard'

Plug 'wellle/tmux-complete.vim'

" Just start vim inside of tmux. airline's colors will be applied to tmux's
" statusline
Plug 'edkolev/tmuxline.vim'

" }}}

" Kepmap for ncm2, UltiSnips, auto-pairs {{{1

" When popup visible, <Tab> acts like <C-n> wich selects next completion item
" from the list. If there is no popup then <Tab> acts as jump to next snippet
" placeholder, if we actually editing a snippet. If no popup and no snippet
" <Tab> acts like <Tab>
function! SmartTab()
    if pumvisible()
        return "\<c-n>"
    else
        let snippet = UltiSnips#ExpandSnippetOrJump()
        if g:ulti_expand_or_jump_res > 0
            return snippet
        else
            return "\<Tab>"
        endif
    endif
endfunction

" The same as previous, but selects previous item and jumps backwards. Or
" acts like <S-Tab>
function! SmartSTab()
    if pumvisible()
        return "\<c-p>"
    else
        let snippet = UltiSnips#JumpBackwards()
        if g:ulti_expand_or_jump_res > 0
            return snippet
        else
            return "\<S-Tab>"
        endif
endfunction

function! ExpandOrJumpOrClosePopup()
    let snippet = UltiSnips#ExpandSnippetOrJump()
    if g:ulti_expand_or_jump_res > 0
        return snippet
    else
        return "\<c-y>" "close popup menu
    endif
endfunction

snoremap <silent><Tab>      <Esc>:call UltiSnips#JumpForwards()<CR>
snoremap <silent><S-Tab>    <Esc>:call UltiSnips#JumpBackwards()<CR>

inoremap <silent><S-Tab>    <C-R>=SmartSTab()<CR>
inoremap <silent><Tab>      <C-R>=SmartTab()<CR>

" if no popup menu, Insert new indented line after return if cursor in blank brackets or quotes.
" if popup menu is visible, try dynamic (e.g. function parameter expansion from LSP) and static snippet, or jump, or close popup menu
imap <expr> <CR> (pumvisible() ? "\<C-y>\<Plug>(expand_or_jump_or_close)" : "\<CR><C-R>=AutoPairsReturn()<CR>")
imap <expr> <Plug>(expand_or_jump_or_close) ( ncm2_ultisnips#completed_is_snippet() ? "\<Plug>(ncm2_ultisnips_expand_completed)" : "\<C-R>=ExpandOrJumpOrClosePopup()<CR>")

" functionality is same as above
" ncm2_ultisnips#expand_or: expand dynamic snippet first
" inoremap <silent> <expr> <CR> ncm2_ultisnips#expand_or(pumvisible()? "\<C-R>=ExpandOrJumpOrClosePopup()<CR>":"\<CR><C-R>=AutoPairsReturn()<CR>", 'n')
" }}}


" autoload vimrc.plug
au! bufwritepost *vimrc.plug source ~/.vimrc.plug

if filereadable(expand("~/.vimrc.plug.local"))
    source ~/.vimrc.plug.local
endif

call plug#end()

" vim: set foldlevel=0 foldmethod=marker:
